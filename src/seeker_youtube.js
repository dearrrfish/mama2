// Generated by CoffeeScript 1.9.1

/*
    Youtube
    @dearrrfish
 */

(function() {
  var ajax, decodeQueryString, decodeYoutubeSourceMap, log, parseYoutube,
    slice = [].slice;

  ajax = require('./ajax');

  log = require('./log');

  exports.match = function() {
    return /youtube\.com/.test(location.href) && !!window.google_video_doc_id;
  };

  exports.getVideos = function(callback) {
    log('开始解析youtube视频地址');
    return parseYoutube(window.google_video_doc_id.replace('yt_', ''), callback);
  };

  exports.decodeQueryString = decodeQueryString = function(query) {
    var i, k, len, q, qs, r, v;
    r = {};
    qs = query.split('&');
    for (i = 0, len = qs.length; i < len; i++) {
      q = qs[i];
      k = decodeURIComponent(q.split('=')[0]);
      v = decodeURIComponent(q.split('=')[1] || '');
      r[k] = v;
    }
    return r;
  };

  exports.decodeYoutubeSourceMap = decodeYoutubeSourceMap = function(raw) {
    var i, len, map, quality, ref, src, stream, type, url;
    map = {};
    ref = raw.split(',');
    for (i = 0, len = ref.length; i < len; i++) {
      src = ref[i];
      stream = decodeQueryString(src);
      type = stream.type.split(';')[0];
      quality = stream.quality.split(';')[0];
      url = stream.url + "&signature=" + stream.sig;
      map[type + " " + quality] = {
        type: type,
        quality: quality,
        url: url
      };
    }
    return map;
  };

  exports.parseYoutube = parseYoutube = function(_id, callback) {
    return ajax({
      url: "https://www.youtube.com/get_video_info?video_id=" + _id,
      contentType: "text",
      callback: function(video_info) {
        var source, video;
        if (video_info === -1) {
          log('解析youtube视频地址失败', 2);
          return;
        }
        video = decodeQueryString(video_info);
        video.srcs = decodeYoutubeSourceMap(video.url_encoded_fmt_stream_map);
        video.getSource = function() {
          var backup, exact, k, quality, ref, src, type;
          type = arguments[0], quality = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          backup = exact = '';
          ref = this.srcs;
          for (k in ref) {
            src = ref[k];
            if (src.type.match(type)) {
              if (src.quality.match(quality)) {
                exact = src.url;
                return exact;
              } else {
                backup = src.url;
              }
            }
          }
          return backup;
        };
        source = [['超清', video.getSource('video/mp4', 'hd720')], ['高清', video.getSource('video/mp4', 'medium')], ['标清', video.getSource('video/mp4', 'small')]];
        log('解析youtube视频地址成功 ' + source.map(function(item) {
          return '<a href=' + item[1] + '>' + item[0] + '</a>';
        }).join(' '), 2);
        return callback(source);
      }
    });
  };

}).call(this);
